{"version":3,"sources":["Context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact2.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Contacts","filter","Contact","id","payload","map","contact","Provider","dispath","setState","axios","get","then","res","this","data","bind","catch","error","console","log","finally","value","props","children","Component","Consumer","showContactInfo","onShowClick","e","onDeleteContact","a","delete","name","email","phone","className","onClick","style","cursor","color","float","to","marginRight","Fragment","key","TextInputGroup","label","placeholder","onChange","htmlFor","classnames","defaultProps","AddContact","onSubmit","preventDefault","newContact","post","history","push","target","EditContact","match","params","put","Header","branName","href","About","NotFound","Test","title","body","fetch","response","json","App","basename","process","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dcc91cc0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'Delete_contact':\r\n            return {\r\n                ...state,\r\n                Contacts: state.Contacts.filter(Contact => \r\n                    Contact.id !== action.payload)\r\n            };\r\n        case 'Add_contact':\r\n            return {\r\n                ...state,\r\n                Contacts: [action.payload,\r\n                ...state.Contacts]\r\n            };\r\n        case 'Update_Contact':\r\n            return {\r\n                Contacts: state.Contacts.map(contact => contact.id === action.payload.id \r\n                    ? (contact = action.payload) \r\n                    :contact)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport class Provider extends Component {\r\n    \r\n    state = {\r\n        Contacts: [],\r\n        dispath: action => {\r\n            this.setState( state => reducer(state, action))\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get('https://jsonplaceholder.typicode.com/users')\r\n        .then(function (res) {\r\n            // handle success\r\n            return this.setState({\r\n                Contacts: res.data\r\n            });\r\n        }.bind(this)).catch(function (error) {\r\n            console.log(error);\r\n        }).finally(function () {\r\n            // always excuted\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react'\r\nimport { Consumer } from '../../Context';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport { async } from 'q';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: false\r\n    };\r\n\r\n    onShowClick = e =>{\r\n        this.setState({\r\n            showContactInfo: !this.state.showContactInfo\r\n        })\r\n    }\r\n\r\n    onDeleteContact =  async (id, dispath) => {\r\n        try {\r\n            await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n            dispath({type: 'Delete_contact', payload: id});\r\n            console.log(\"successful\");\r\n        } catch (e) {\r\n            console.log(\"that failed\", e);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        \r\n        const {id, name , email, phone } = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n\r\n        return (\r\n\r\n            <Consumer>\r\n                {value => {\r\n                    const  {dispath} = value;\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>{name} {'  '}\r\n                                <i onClick={this.onShowClick} \r\n                                className=\"fas fa-sort-down\" style={{ cursor: 'pointer'}}></i>\r\n                                <i onClick={this.onDeleteContact.bind(this, id, dispath)}\r\n                                className=\"fas fa-times\" style={{ cursor: 'pointer', color: 'red', float: 'right'}}></i>\r\n                                <Link to={`contact/edit/${id}`}>\r\n                                    <i className=\"fas fa-pencil-alt\" style={{\r\n                                        cursor: 'poiter',\r\n                                        float: 'right',\r\n                                        color: 'Green',\r\n                                        marginRight: '1rem'\r\n                                    }}/>\r\n                                </Link>\r\n                            </h4>\r\n                        \r\n                            {showContactInfo ? (<ul className=\"list-group\">\r\n                                <li className=\"list-group-item\">{email}</li>\r\n                                <li className=\"list-group-item\">{phone}</li>\r\n                            </ul>) : null}\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n}\r\nexport default Contact;","import React, { Component } from 'react'\r\nimport Contact from './Contact';\r\nimport { Consumer } from '../../Context';\r\n\r\nclass Contacts extends Component {\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { Contacts } = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span className=\"text-danger\">Contact</span> List\r\n                            </h1>\r\n                            {Contacts.map(contact =>\r\n                                <Contact key={contact.id} contact={contact} \r\n                                    />\r\n                            )}\r\n                        </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contacts;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames';\r\n\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return (\r\n            <div className=\"form-group\">\r\n                    <label htmlFor={name}>{label}</label>\r\n                    <input\r\n                        type={type}\r\n                        name={name}\r\n                        className={classnames('form-control form-control-lg', {\r\n                            'is-invalid': error\r\n                        })}\r\n                        placeholder={placeholder}\r\n                        value={value}\r\n                        onChange= {onChange}\r\n                    />\r\n                    {error && <div className=\"invalid-feedback\">This is invalid</div>}\r\n            </div>\r\n    )\r\n}\r\n\r\nTextInputGroup.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    type: PropTypes.string,\r\n    onChange: PropTypes.func.isRequired,\r\n    error:  PropTypes.string\r\n    \r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n}\r\nexport default TextInputGroup\r\n","import React, { Component } from 'react'\r\nimport { Consumer } from '../../Context';\r\n//import uuid from 'uuid';\r\nimport TextInputGroup from './../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\n\r\nclass AddContact extends Component {\r\n    \r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        error: {}\r\n    }\r\n    \r\n    onSubmit =  async (dispath, e) => {\r\n        e.preventDefault();\r\n        const  {name, email, phone} = this.state;\r\n\r\n        //Check For Errors\r\n        if(name === ''){\r\n            this.setState({error: {name: 'this is name wrong or invalid !'}})\r\n            return;\r\n        }\r\n        \r\n        if(phone === ''){\r\n            this.setState({error: {phone: 'this is phone wrong or invalid !'}})\r\n            return;\r\n        }\r\n\r\n        if(email === ''){\r\n            this.setState({error: {email: 'this is email wrong or invalid !'}})\r\n            return;\r\n        }\r\n\r\n        const newContact = {\r\n            // id: uuid(),\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n        \r\n        const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\r\n        dispath({type: 'Add_contact', payload: res.data});\r\n        \r\n        \r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone:'', \r\n            error: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n    };\r\n    \r\n    onChange = (e) => this.setState({ [e.target.name] : e.target.value});\r\n\r\n    render() {\r\n        const { name, phone, email, error } = this.state; \r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispath} = value;\r\n                    return (\r\n                <div className=\"card mb-3\">\r\n                    <div className=\"card-header\">Add Contact</div>\r\n                    <div className=\"card-body\">\r\n                        <form onSubmit={this.onSubmit.bind(this, dispath)}>\r\n                            <TextInputGroup \r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter name\"\r\n                                value={name}\r\n                                onChange={this.onChange}\r\n                                error= {error.name}\r\n                            />\r\n                            <TextInputGroup \r\n                                label=\"Phone\"\r\n                                name=\"phone\"\r\n                                placeholder=\"Enter phone\"\r\n                                value={phone}\r\n                                onChange={this.onChange}\r\n                                error= {error.phone}\r\n                            />\r\n                            <TextInputGroup \r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                placeholder=\"Enter email\"\r\n                                value={email}\r\n                                onChange={this.onChange}\r\n                                type=\"email\"\r\n                                error= {error.email}\r\n                            />\r\n                            <input \r\n                                type=\"submit\" \r\n                                value=\"Add Contact\" \r\n                                className=\"btn btn-light btn-block\"\r\n                                />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddContact;","import React, { Component } from 'react'\r\nimport { Consumer } from '../../Context';\r\nimport TextInputGroup from './../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\n\r\nclass EditContact extends Component {\r\n    \r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        error: {}\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n        const value = res.data;\r\n        console.log(res);\r\n        this.setState({\r\n            name: value.name,\r\n            email: value.email,\r\n            phone: value.phone,\r\n        });\r\n    }\r\n\r\n    onSubmit =  async (dispath, e) => {\r\n        e.preventDefault();\r\n        const  {name, email, phone} = this.state;\r\n\r\n        //Check For Errors\r\n        if(name === ''){\r\n            this.setState({error: {name: 'this is name wrong or invalid !'}})\r\n            return;\r\n        }\r\n        \r\n        if(phone === ''){\r\n            this.setState({error: {phone: 'this is phone wrong or invalid !'}})\r\n            return;\r\n        }\r\n\r\n        if(email === ''){\r\n            this.setState({error: {email: 'this is email wrong or invalid !'}})\r\n            return;\r\n        }\r\n        \r\n        const newContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, newContact);\r\n        dispath({type: 'Update_Contact', payload: res.data});\r\n\r\n        this.props.history.push('/');\r\n    };\r\n    \r\n    onChange = (e) => this.setState({ [e.target.name] : e.target.value});\r\n\r\n    render() {\r\n        const { name, phone, email, error } = this.state; \r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispath} = value;\r\n                    return (\r\n                <div className=\"card mb-3\">\r\n                    <div className=\"card-header\"><h3>Edit Contact</h3></div>\r\n                    <div className=\"card-body\">\r\n                        <form onSubmit={this.onSubmit.bind(this, dispath)}>\r\n                            <TextInputGroup \r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter name\"\r\n                                value={name}\r\n                                onChange={this.onChange}\r\n                                error= {error.name}\r\n                            />\r\n                            <TextInputGroup \r\n                                label=\"Phone\"\r\n                                name=\"phone\"\r\n                                placeholder=\"Enter phone\"\r\n                                value={phone}\r\n                                onChange={this.onChange}\r\n                                error= {error.phone}\r\n                            />\r\n                            <TextInputGroup \r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                placeholder=\"Enter email\"\r\n                                value={email}\r\n                                onChange={this.onChange}\r\n                                type=\"email\"\r\n                                error= {error.email}\r\n                            />\r\n                            <input \r\n                                type=\"submit\" \r\n                                value=\"Update Contact\" \r\n                                className=\"btn btn-light btn-block\"\r\n                                />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditContact;","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n\r\n    const { branName } = props;\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    {branName}\r\n                </a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fas fa-home\" /> Home\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                                <i className=\"fas fa-plus\" /> Add\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                                <i className=\"fas fa-question\" /> About\r\n                            </Link>\r\n                        </li>\r\n                        \r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>        \r\n    )\r\n};\r\n\r\nHeader.defaultProps = {\r\n    branName: 'My App'\r\n};\r\n\r\nHeader.propTypes = {\r\n    branName: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react'\r\n\r\nconst About = (props) => {\r\n    return (\r\n        <div>\r\n            {/* <h2>{props.match.params.id}</h2> */}\r\n            <h2>This is the About Page ....xxx</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className=\"text-danger\">404</span> Page Not Found</h1>\r\n            <p className=\"Lead\">Sorry, that page does not exist</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nclass Test extends Component {\r\n    state ={\r\n        title: '',\r\n        body: ''\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/posts/1')\r\n        .then(response => response.json())\r\n        .then( data => (\r\n            this.setState({\r\n                title: data.title,\r\n                body: data.body\r\n            })\r\n        ))\r\n    }\r\n\r\n    render() {\r\n        const {title, body} = this.state;\r\n        return (\r\n            <div>\r\n                <h1>{title}</h1>\r\n                <p>{body}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Test;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { HashRouter as Router, Route, Switch} from 'react-router-dom';\r\n\r\nimport { Provider } from './Context';\r\n\r\nimport Contacts from './components/contacts/Contacts';\r\nimport AddContact from './components/contacts/AddContact2';\r\nimport EditContact from './components/contacts/EditContact';\r\nimport Header from './components/layout/Header';\r\nimport About from './components/pages/About';\r\nimport NotFound from './components/pages/NotFound';\r\nimport Test from './components/test/Test';\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <Provider>\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n      <div className=\"App\">\r\n        <Header branName=\"Contact Manager\"/>\r\n        <div className=\"container\">\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Contacts}/>\r\n            <Route exact path=\"/about\" component={About}/>\r\n            <Route exact path=\"/contact/add\" component={AddContact}/>\r\n            <Route exact path=\"/contact/edit/:id\" component={EditContact}/>\r\n            <Route exact path=\"/test\" component={Test}/>\r\n            <Route component={NotFound}/>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}